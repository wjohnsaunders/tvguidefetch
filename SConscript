#
# Generic SConscript for TvGuideFetch.
#

# Define a custom builder to create the config files.
import re
def BuildConfig(target, source, env):
	output = str(target[0])
	input = str(source[0])
	match = re.search('^config(.*)\.xml$', input)
	if match:
		symbol = match.group(1)
	else:
		return 'Cannot parse symbol from target name'
	with open(output, 'w') as outFile:
		outFile.write("// This file is automatically generated - dont edit it\n")
		outFile.write("#include \"Config.hpp\"\n")
		outFile.write("class Config%s\n" % (symbol))
		outFile.write("{\n")
		outFile.write("public:\n")
		outFile.write("    Config%s() { Config::instance().registerDefaultConfig(\"%s\", config); }\n" % (symbol, symbol))
		outFile.write("    static Config%s instance;\n" % (symbol))
		outFile.write("    static const char *config;\n")
		outFile.write("};\n")
		outFile.write("Config%s Config%s::instance;\n" % (symbol, symbol))
		outFile.write("const char *Config%s::config =\n" % (symbol))

		with open(input, 'r') as inFile:
			last = None
			for line in inFile:
				line = line.strip()
				line = line.replace('"', '\\"')
				if last:
					outFile.write("\"%s\\n\"\\\n" % (last))
				last = line
			outFile.write("\"%s\\n\";\n" %(last))
	return None

config = Builder(action = BuildConfig,
		suffix = '.cpp',
		src_suffix = '.xml')

# Customise build environment.
Import('env bldDir')
env = env.Clone()
env.Append(BUILDERS = {'Config': config})
env.Append(CPPPATH = '.')

srcs = []
# Rules to generate the configuration files.
srcs += env.Config(bldDir + 'configEmpty.cpp', 'configEmpty.xml')
srcs += env.Config(bldDir + 'configFreeview.cpp', 'configFreeview.xml')
srcs += env.Config(bldDir + 'configAnalogue.cpp', 'configAnalogue.xml')
srcs += env.Config(bldDir + 'configFoxtel.cpp', 'configFoxtel.xml')

# Build sources.
srcs += Split("""
TvGuideFetch.cpp
XmlDom.cpp
Config.cpp
HttpFetch.cpp
CmdOptions.cpp
Channel.cpp
EasyDate.cpp
""")

# Flags needed for libexpat, libcurl, zlib.
libraries = Split('expat curl ssl crypto z')
env.Prepend(LIBS = libraries)

# Build objects away from the source
objs = [
	env.Object(bldDir + '${SOURCE.filebase}' + env['OBJSUFFIX'], src)
		for src in srcs
]

# Build rule for tv_grab_au_tvguide
env.Program(bldDir + 'tv_grab_au_tvguide', objs)
